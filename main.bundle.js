(()=>{"use strict";var e,r,n={603:(e,r,n)=>{function t(e,r,n){const t=`<table border=1>${r.map(((e,r)=>`<tr>${e.map(((e,n)=>1===e?`<td \n        data-x=${n}\n        data-y=${r}\n        class="cell alive" \n        style="background-color:#FA58D0; height:10px; width:10px;"></td>`:`<td \n      data-x=${n}\n      data-y=${r}\n      class="cell dead" \n      style="background-color:#FFFFFF; height:10px; width:10px;"></td>`)).join("")}</tr>`)).join("")}</table>`;e.innerHTML=t,console.log(e.innerHTML),e.querySelector("table").addEventListener("click",(e=>{const r=e.target,t=r.getAttribute("data-x"),o=r.getAttribute("data-y");t>=0&&o>=0&&n(Number(t),Number(o))}))}function o(e,r,n){const t=e[n];if(void 0===t)return 0;const o=t[r];return void 0===o?0:o}function a(e,r,n){const a=document.querySelector(".speed-input"),i=document.querySelector(".speed-value");let c;if(!a||!i)throw new Error("speed input field not found");i.innerHTML=a?.value,c=Number(a.value),a.addEventListener("input",(()=>{i&&(i.innerHTML=a.value,c=Number(a.value))}));let d,l=!1;n.innerHTML='<div class="field-wrapper"></div><button>Start</button>';const u=n.querySelector(".field-wrapper"),s=n.querySelector("button");if(!s)throw new Error("Button not found");let f=Array.from({length:r}).map((()=>Array.from({length:e}).fill(0)));console.log(f);const p=(e,r)=>{f[r][e]=0===f[r][e]?1:0,t(u,f,p)};function h(){if(!s)throw new Error("Button not found");l=!1,s.innerHTML="Start",clearInterval(d)}t(u,f,p),console.log(u.innerHTML),s.addEventListener("click",(()=>{l?h():function(){if(!s)throw new Error("Button not found");l=!0,s.innerHTML="Stop",d=setInterval((()=>{f=function(e){return e.map(((r,n)=>r.map(((r,t)=>{const a=function(e,r,n){let t=0;for(let a=e-1;a<=e+1;a+=1)t+=Number(o(n,a,r-1));for(let a=e-1;a<=e+1;a+=1)t+=Number(o(n,a,r+1));return t+=Number(o(n,e-1,r)),t+=Number(o(n,e+1,r)),t}(t,n,e),i=o(e,t,n);var c;return 3===(c=a)?1:c>3||c<2?0:2===c&&1===i?1:0}))))}(f),t(u,f,p),function(e){for(let r=0;r<e.length;r+=1){const n=e[r];for(let e=0;e<n.length;e+=1)if(n[e])return!0}return!1}(f)||(alert("Death on the block"),h())}),1e3/c)}()}))}n(518);const i=document.querySelector(".game-fields"),c=document.createElement("div"),d=document.createElement("div");i?.append(c),i?.append(d),a(3,3,c),a(10,10,d)},545:(e,r,n)=>{n.r(r),n.d(r,{default:()=>c});var t=n(537),o=n.n(t),a=n(645),i=n.n(a)()(o());i.push([e.id,".container{max-width:960px;margin:0 auto}.main{margin-top:50px;display:flex;flex-flow:column;align-items:center;row-gap:2rem}.params{display:flex;flex-flow:row wrap;text-align:center;justify-content:center}.params .param-title{flex-basis:100%}.params .speed-input{flex-basis:80%}.params .speed-value{flex-basis:10%;margin-left:.5rem;padding:10px;border:2px solid}.game-fields{display:flex;flex-flow:row wrap;column-gap:1.5rem}","",{version:3,sources:["webpack://./src/styles/style.scss"],names:[],mappings:"AAAA,WACE,eAAA,CACA,aAAA,CAGF,MACE,eAAA,CACA,YAAA,CACA,gBAAA,CACA,kBAAA,CACA,YAAA,CAGF,QACE,YAAA,CACA,kBAAA,CACA,iBAAA,CACA,sBAAA,CAEA,qBACE,eAAA,CAGF,qBACE,cAAA,CAEF,qBACE,cAAA,CACA,iBAAA,CACA,YAAA,CACA,gBAAA,CAIJ,aACE,YAAA,CACA,kBAAA,CACA,iBAAA",sourcesContent:[".container {\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n.main {\n  margin-top: 50px;\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  row-gap: 2rem;\n}\n\n.params {\n  display: flex;\n  flex-flow: row wrap;\n  text-align: center;\n  justify-content: center;\n\n  .param-title {\n    flex-basis: 100%;\n  }\n\n  .speed-input {\n    flex-basis: 80%;\n  }\n  .speed-value {\n    flex-basis: 10%;\n    margin-left: 0.5rem;\n    padding: 10px;\n    border: 2px solid;\n  }\n}\n\n.game-fields {\n  display: flex;\n  flex-flow: row wrap;\n  column-gap: 1.5rem;\n}\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var n="",t=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),t&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=e(r),t&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(e,n,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);t&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),r.push(u))}},r}},537:e=>{e.exports=function(e){var r=e[1],n=e[3];if(!n)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[r].concat([a]).join("\n")}return[r].join("\n")}},518:(e,r,n)=>{var t=n(379),o=n.n(t),a=n(795),i=n.n(a),c=n(569),d=n.n(c),l=n(565),u=n.n(l),s=n(216),f=n.n(s),p=n(589),h=n.n(p),m=n(545),v={};v.styleTagTransform=h(),v.setAttributes=u(),v.insert=d().bind(null,"head"),v.domAPI=i(),v.insertStyleElement=f();var A=o()(m.default,v);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,g=y?m:m.default.locals;e.hot.accept(545,(r=>{m=n(545),function(e,r,n){if(!e&&r||e&&!r)return!1;var t;for(t in e)if((!n||"default"!==t)&&e[t]!==r[t])return!1;for(t in r)if(!(n&&"default"===t||e[t]))return!1;return!0}(g,y?m:m.default.locals,y)?(g=y?m:m.default.locals,A(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){A()})),m.default&&m.default.locals&&m.default.locals},379:e=>{var r=[];function n(e){for(var n=-1,t=0;t<r.length;t++)if(r[t].identifier===e){n=t;break}return n}function t(e,t){for(var a={},i=[],c=0;c<e.length;c++){var d=e[c],l=t.base?d[0]+t.base:d[0],u=a[l]||0,s="".concat(l," ").concat(u);a[l]=u+1;var f=n(s),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==f)r[f].references++,r[f].updater(p);else{var h=o(p,t);t.byIndex=c,r.splice(c,0,{identifier:s,updater:h,references:1})}i.push(s)}return i}function o(e,r){var n=r.domAPI(r);return n.update(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;n.update(e=r)}else n.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);r[c].references--}for(var d=t(e,o),l=0;l<a.length;l++){var u=n(a[l]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}a=d}}},569:e=>{var r={};e.exports=function(e,n){var t=function(e){if(void 0===r[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}r[e]=n}return r[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:e=>{e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,n)=>{e.exports=function(e){var r=n.nc;r&&e.setAttribute("nonce",r)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var r=e.insertStyleElement(e);return{update:function(n){!function(e,r,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,o&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,e,r.options)}(r,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}}},t={};function o(e){var r=t[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var a=t[e]={id:e,exports:{}};try{var i={id:e,module:a,factory:n[e],require:o};o.i.forEach((function(e){e(i)})),a=i.module,i.factory.call(a.exports,a,a.exports,i.require)}catch(e){throw a.error=e,e}return a.exports}o.m=n,o.c=t,o.i=[],o.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return o.d(r,{a:r}),r},o.d=(e,r)=>{for(var n in r)o.o(r,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"2ade39b92ce95692e651",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="my-webpack-project:",o.l=(n,t,a,i)=>{if(e[n])e[n].push(t);else{var c,d;if(void 0!==a)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var s=l[u];if(s.getAttribute("src")==n||s.getAttribute("data-webpack")==r+a){c=s;break}}c||(d=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,o.nc&&c.setAttribute("nonce",o.nc),c.setAttribute("data-webpack",r+a),c.src=n),e[n]=[t];var f=(r,t)=>{c.onerror=c.onload=null,clearTimeout(p);var o=e[n];if(delete e[n],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(t))),r)return r(t)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=f.bind(null,c.onerror),c.onload=f.bind(null,c.onload),d&&document.head.appendChild(c)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,r,n,t={},a=o.c,i=[],c=[],d="idle",l=0,u=[];function s(e){d=e;for(var r=[],n=0;n<c.length;n++)r[n]=c[n].call(null,e);return Promise.all(r)}function f(){0==--l&&s("ready").then((function(){if(0===l){var e=u;u=[];for(var r=0;r<e.length;r++)e[r]()}}))}function p(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return s("check").then(o.hmrM).then((function(n){return n?s("prepare").then((function(){var t=[];return r=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,a){return o.hmrC[a](n.c,n.r,n.m,e,r,t),e}),[])).then((function(){return r=function(){return e?m(e):s("ready").then((function(){return t}))},0===l?r():new Promise((function(e){u.push((function(){e(r())}))}));var r}))})):s(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+d+")")})):m(e)}function m(e){e=e||{},v();var t=r.map((function(r){return r(e)}));r=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return s("abort").then((function(){throw o[0]}));var a=s("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var i,c=s("apply"),d=function(e){i||(i=e)},l=[];return t.forEach((function(e){if(e.apply){var r=e.apply(d);if(r)for(var n=0;n<r.length;n++)l.push(r[n])}})),Promise.all([a,c]).then((function(){return i?s("fail").then((function(){throw i})):n?m(e).then((function(e){return l.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):s("idle").then((function(){return l}))}))}function v(){if(n)return r||(r=[]),Object.keys(o.hmrI).forEach((function(e){n.forEach((function(n){o.hmrI[e](n,r)}))})),n=void 0,!0}o.hmrD=t,o.i.push((function(u){var m,v,A,y,g=u.module,b=function(r,n){var t=a[n];if(!t)return r;var o=function(o){if(t.hot.active){if(a[o]){var c=a[o].parents;-1===c.indexOf(n)&&c.push(n)}else i=[n],e=o;-1===t.children.indexOf(o)&&t.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+n),i=[];return r(o)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(n){r[e]=n}}};for(var u in r)Object.prototype.hasOwnProperty.call(r,u)&&"e"!==u&&Object.defineProperty(o,u,c(u));return o.e=function(e){return function(e){switch(d){case"ready":s("prepare");case"prepare":return l++,e.then(f,f),e;default:return e}}(r.e(e))},o}(u.require,u.id);g.hot=(m=u.id,v=g,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:A=e!==m,_requireSelf:function(){i=v.parents.slice(),e=A?void 0:m,o(m)},active:!0,accept:function(e,r,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._acceptedDependencies[e[t]]=r||function(){},y._acceptedErrorHandlers[e[t]]=n;else y._acceptedDependencies[e]=r||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._declinedDependencies[e[r]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=y._disposeHandlers.indexOf(e);r>=0&&y._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":r=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,r)})),s("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return d;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var r=c.indexOf(e);r>=0&&c.splice(r,1)},data:t[m]},e=void 0,y),g.parents=i,g.children=[],i=[],u.require=b})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var r=o.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");if(n.length)for(var t=n.length-1;t>-1&&!e;)e=n[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,r,n,t,a,i=o.hmrS_jsonp=o.hmrS_jsonp||{179:0},c={};function d(r,n){return e=n,new Promise(((e,n)=>{c[r]=e;var t=o.p+o.hu(r),a=new Error;o.l(t,(e=>{if(c[r]){c[r]=void 0;var t=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;a.message="Loading hot update chunk "+r+" failed.\n("+t+": "+o+")",a.name="ChunkLoadError",a.type=t,a.request=o,n(a)}}))}))}function l(e){function c(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var a=t.pop(),i=a.id,c=a.chain,l=o.c[i];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(l.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var u=0;u<l.parents.length;u++){var s=l.parents[u],f=o.c[s];if(f){if(f.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([s]),moduleId:i,parentId:s};-1===r.indexOf(s)&&(f.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),d(n[s],[i])):(delete n[s],r.push(s),t.push({chain:c.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function d(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,r=void 0;var l={},u=[],s={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in n)if(o.o(n,p)){var h,m=n[p],v=!1,A=!1,y=!1,g="";switch((h=m?c(p):{type:"disposed",moduleId:p}).chain&&(g="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+g));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+g));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+g));break;case"accepted":e.onAccepted&&e.onAccepted(h),A=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(A)for(p in s[p]=m,d(u,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,p)&&(l[p]||(l[p]=[]),d(l[p],h.outdatedDependencies[p]));y&&(d(u,[h.moduleId]),s[p]=f)}n=void 0;for(var b,w=[],x=0;x<u.length;x++){var E=u[x],C=o.c[E];C&&(C.hot._selfAccepted||C.hot._main)&&s[E]!==f&&!C.hot._selfInvalidated&&w.push({module:E,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete i[e]})),t=void 0;for(var r,n=u.slice();n.length>0;){var a=n.pop(),c=o.c[a];if(c){var d={},s=c.hot._disposeHandlers;for(x=0;x<s.length;x++)s[x].call(null,d);for(o.hmrD[a]=d,c.hot.active=!1,delete o.c[a],delete l[a],x=0;x<c.children.length;x++){var f=o.c[c.children[x]];f&&(e=f.parents.indexOf(a))>=0&&f.parents.splice(e,1)}}}for(var p in l)if(o.o(l,p)&&(c=o.c[p]))for(b=l[p],x=0;x<b.length;x++)r=b[x],(e=c.children.indexOf(r))>=0&&c.children.splice(e,1)},apply:function(r){for(var n in s)o.o(s,n)&&(o.m[n]=s[n]);for(var t=0;t<a.length;t++)a[t](o);for(var i in l)if(o.o(l,i)){var c=o.c[i];if(c){b=l[i];for(var d=[],f=[],p=[],h=0;h<b.length;h++){var m=b[h],v=c.hot._acceptedDependencies[m],A=c.hot._acceptedErrorHandlers[m];if(v){if(-1!==d.indexOf(v))continue;d.push(v),f.push(A),p.push(m)}}for(var y=0;y<d.length;y++)try{d[y].call(null,b)}catch(n){if("function"==typeof f[y])try{f[y](n,{moduleId:i,dependencyId:p[y]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[y],error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[y],error:n}),e.ignoreErrored||r(n)}}}for(var g=0;g<w.length;g++){var x=w[g],E=x.module;try{x.require(E)}catch(n){if("function"==typeof x.errorHandler)try{x.errorHandler(n,{moduleId:E,module:o.c[E]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:E,error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:E,error:n}),e.ignoreErrored||r(n)}}return u}}}self.webpackHotUpdatemy_webpack_project=(r,t,i)=>{for(var d in t)o.o(t,d)&&(n[d]=t[d],e&&e.push(d));i&&a.push(i),c[r]&&(c[r](),c[r]=void 0)},o.hmrI.jsonp=function(e,r){n||(n={},a=[],t=[],r.push(l)),o.o(n,e)||(n[e]=o.m[e])},o.hmrC.jsonp=function(e,c,u,s,f,p){f.push(l),r={},t=c,n=u.reduce((function(e,r){return e[r]=!1,e}),{}),a=[],e.forEach((function(e){o.o(i,e)&&void 0!==i[e]?(s.push(d(e,p)),r[e]=!0):r[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,n){r&&o.o(r,e)&&!r[e]&&(n.push(d(e)),r[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o.nc=void 0,o(603)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,